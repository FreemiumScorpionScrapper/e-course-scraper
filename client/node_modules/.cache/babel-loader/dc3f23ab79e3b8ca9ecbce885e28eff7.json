{"ast":null,"code":"// const puppeteer = require(\"puppeteer\");\nexport default (async query => {\n  const puppeteer = require(\"puppeteer\");\n\n  let courses = [];\n  const COURSERA = \"https://www.coursera.org/search\";\n  const UDEMY = \"https://www.udemy.com/\";\n  const EDX = \"https://www.edx.org/\";\n  const MIT = \"https://ocw.mit.edu/\";\n  const browser = await puppeteer.launch(); // const browser = await puppeteer.launch({ headless: false });\n\n  const page = await browser.newPage();\n\n  try {\n    //~~~~~~~~~~~~~~~~~~~coursera~~~~~~~~~~~~~~~~~~~\n    try {\n      await page.goto(COURSERA, {\n        waitUntil: \"load\"\n      }); //wait for input elements to load\n\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const courseraInput = (await page.$$(\".react-autosuggest__input\"))[1];\n    await courseraInput.type(query);\n    await courseraInput.type(String.fromCharCode(13));\n    await page.waitFor(800);\n    const courseraList = await page.$$(\".ais-InfiniteHits-item\"); //   console.log(courseraList);\n\n    let courseraCourses = [];\n\n    for (let item of courseraList) {\n      const link = await item.$eval(\"a\", a => a.href).catch(err => console.log(\"no link\")); // console.log(link);\n\n      const courseName = await item.$eval(\"h2\", name => name.textContent).catch(err => console.log(\"no course name\")); // console.log(courseName);\n\n      const instructor = await item.$eval(\".partner-name\", name => name.textContent).catch(err => console.log(\"no partner name\")); // console.log(instructor);\n\n      const image = await item.$eval(\".image-wrapper img\", img => img.src).catch(err => console.log(\"no image\")); // console.log(image);\n\n      const courseraItem = {\n        courseName,\n        instructor,\n        image,\n        link\n      };\n      courseraCourses = [...courseraCourses, courseraItem]; //courses = [...courseraCourses, udemyCourses..., edxCourses..., mitCourses...]\n    } //~~~~~~~~~~~~udemy~~~~~~~~~~~~~~~~\n\n\n    try {\n      await page.goto(UDEMY, {\n        waitUntil: \"load\"\n      }); //wait for input elements to load\n\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const udemyInput = await page.$(\".billboard--billboard--3-fQr input\");\n    await udemyInput.type(query);\n    await udemyInput.type(String.fromCharCode(13));\n    await page.waitForSelector(\".udlite-container\");\n    const udemyListRaw = [...(await page.$$(\".popover--popover--t3rNO\"))];\n    const udemyList = udemyListRaw.splice(4, udemyListRaw.length - 1); //hides an ad interfering with scraping\n\n    const ad = await page.$eval(\".search--unit-injection--1bANP\", ad => ad.style.display = \"none\").catch(err => console.log(\"no title\"));\n    let udemyCourses = [];\n\n    for (let item of udemyList) {\n      const courseName = await item.$eval(\".udlite-focus-visible-target\", title => title.textContent).catch(err => console.log(\"no title\")); // console.log(courseName);\n\n      const instructor = await item.$eval(\".udlite-text-xs\", text => text.textContent).catch(err => console.log(\"no instructor\")); // console.log(instructor);\n\n      const imageRaw = await item.$eval(\".course-card--course-image--2sjYP\", img => img.src).catch(err => console.log(\"no image\"));\n      const link = await item.$eval(\"a\", a => a.href).catch(err => console.log(\"no link\"));\n      const image = imageRaw.startsWith(\"data\") ? \"\" : imageRaw;\n      const udemyItem = {\n        courseName,\n        instructor,\n        image,\n        link\n      };\n      udemyCourses = [...udemyCourses, udemyItem];\n    } //~~~~~~~~~~~~~~~~~EDX~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n    try {\n      await page.goto(EDX, {\n        waitUntil: \"load\"\n      }); //wait for input elements to load\n\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const edxInput = await page.$(\"#home-search\");\n    await edxInput.type(query);\n    await edxInput.type(String.fromCharCode(13)); //wait for results\n\n    try {\n      await page.waitForSelector(\".d-md-block\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    const edxList = await page.$$(\".discovery-card\");\n    let edxCourses = [];\n\n    for (let item of edxList) {\n      const courseName = await item.$eval(\".name-heading\", title => title.textContent).catch(err => console.log(\"no title\"));\n      const instructor = await item.$eval(\".provider\", text => text.textContent).catch(err => console.log(\"no instructor\"));\n      const image = await item.$eval(\"img\", img => img.src).catch(err => console.log(\"no src\"));\n      const link = await item.$eval(\"a\", a => a.href).catch(err => console.log(\"no link\"));\n      const edxItem = {\n        courseName,\n        instructor,\n        image,\n        link\n      };\n      edxCourses = [...edxCourses, edxItem];\n    } //MIT\n\n\n    try {\n      await page.goto(MIT, {\n        waitUntil: \"load\"\n      }); //wait for input elements to load\n\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const mitInput = await page.$(\"#gsc-i-id1\");\n    await mitInput.type(query);\n    await mitInput.type(String.fromCharCode(13)); //wait for results\n\n    try {\n      await page.waitForSelector(\"#resInfo-1\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    const mitList = await page.$$(\".gsc-result\");\n    let mitCourses = [];\n\n    for (let item of mitList) {\n      const courseName = await item.$eval(\".gs-title\", title => title.textContent).catch(err => console.log(\"no title\"));\n      const image = await item.$eval(\"img\", img => img.src).catch(err => console.log(\"no src\"));\n      const link = await item.$eval(\".gs-title a\", a => a.href).catch(err => console.log(\"no link\"));\n      const mitItem = {\n        courseName,\n        instructor: \"MIT\",\n        image,\n        link\n      };\n      mitCourses = [...mitCourses, mitItem];\n    }\n\n    courses = [...courseraCourses, ...udemyCourses, ...edxCourses, ...mitCourses];\n    console.log(courses);\n  } catch (err) {\n    console.error(err + \": no results found\");\n  }\n\n  await browser.close();\n  return courses;\n});","map":{"version":3,"sources":["/Users/Kevin/Desktop/coding/Portfolio Projects/course-scraper/src/scraper.js"],"names":["query","puppeteer","require","courses","COURSERA","UDEMY","EDX","MIT","browser","launch","page","newPage","goto","waitUntil","waitForSelector","err","console","error","close","courseraInput","$$","type","String","fromCharCode","waitFor","courseraList","courseraCourses","item","link","$eval","a","href","catch","log","courseName","name","textContent","instructor","image","img","src","courseraItem","udemyInput","$","udemyListRaw","udemyList","splice","length","ad","style","display","udemyCourses","title","text","imageRaw","startsWith","udemyItem","edxInput","edxList","edxCourses","edxItem","mitInput","mitList","mitCourses","mitItem"],"mappings":"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","sourcesContent":["// const puppeteer = require(\"puppeteer\");\n\nexport default async (query) => {\n  const puppeteer = require(\"puppeteer\");\n  let courses = [];\n  const COURSERA = \"https://www.coursera.org/search\";\n  const UDEMY = \"https://www.udemy.com/\";\n  const EDX = \"https://www.edx.org/\";\n  const MIT = \"https://ocw.mit.edu/\";\n\n  const browser = await puppeteer.launch();\n  // const browser = await puppeteer.launch({ headless: false });\n  const page = await browser.newPage();\n\n  try {\n    //~~~~~~~~~~~~~~~~~~~coursera~~~~~~~~~~~~~~~~~~~\n\n    try {\n      await page.goto(COURSERA, { waitUntil: \"load\" });\n\n      //wait for input elements to load\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const courseraInput = (await page.$$(\".react-autosuggest__input\"))[1];\n    await courseraInput.type(query);\n    await courseraInput.type(String.fromCharCode(13));\n\n    await page.waitFor(800);\n    const courseraList = await page.$$(\".ais-InfiniteHits-item\");\n    //   console.log(courseraList);\n\n    let courseraCourses = [];\n    for (let item of courseraList) {\n      const link = await item\n        .$eval(\"a\", (a) => a.href)\n        .catch((err) => console.log(\"no link\"));\n\n      // console.log(link);\n\n      const courseName = await item\n        .$eval(\"h2\", (name) => name.textContent)\n        .catch((err) => console.log(\"no course name\"));\n\n      // console.log(courseName);\n\n      const instructor = await item\n        .$eval(\".partner-name\", (name) => name.textContent)\n        .catch((err) => console.log(\"no partner name\"));\n\n      // console.log(instructor);\n\n      const image = await item\n        .$eval(\".image-wrapper img\", (img) => img.src)\n        .catch((err) => console.log(\"no image\"));\n\n      // console.log(image);\n\n      const courseraItem = {\n        courseName,\n        instructor,\n        image,\n        link,\n      };\n\n      courseraCourses = [...courseraCourses, courseraItem];\n\n      //courses = [...courseraCourses, udemyCourses..., edxCourses..., mitCourses...]\n    }\n\n    //~~~~~~~~~~~~udemy~~~~~~~~~~~~~~~~\n\n    try {\n      await page.goto(UDEMY, { waitUntil: \"load\" });\n\n      //wait for input elements to load\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const udemyInput = await page.$(\".billboard--billboard--3-fQr input\");\n\n    await udemyInput.type(query);\n    await udemyInput.type(String.fromCharCode(13));\n\n    await page.waitForSelector(\".udlite-container\");\n\n    const udemyListRaw = [...(await page.$$(\".popover--popover--t3rNO\"))];\n    const udemyList = udemyListRaw.splice(4, udemyListRaw.length - 1);\n\n    //hides an ad interfering with scraping\n    const ad = await page\n      .$eval(\n        \".search--unit-injection--1bANP\",\n        (ad) => (ad.style.display = \"none\")\n      )\n      .catch((err) => console.log(\"no title\"));\n\n    let udemyCourses = [];\n    for (let item of udemyList) {\n      const courseName = await item\n        .$eval(\".udlite-focus-visible-target\", (title) => title.textContent)\n        .catch((err) => console.log(\"no title\"));\n\n      // console.log(courseName);\n\n      const instructor = await item\n        .$eval(\".udlite-text-xs\", (text) => text.textContent)\n        .catch((err) => console.log(\"no instructor\"));\n\n      // console.log(instructor);\n\n      const imageRaw = await item\n        .$eval(\".course-card--course-image--2sjYP\", (img) => img.src)\n        .catch((err) => console.log(\"no image\"));\n\n      const link = await item\n        .$eval(\"a\", (a) => a.href)\n        .catch((err) => console.log(\"no link\"));\n\n      const image = imageRaw.startsWith(\"data\") ? \"\" : imageRaw;\n\n      const udemyItem = {\n        courseName,\n        instructor,\n        image,\n        link,\n      };\n\n      udemyCourses = [...udemyCourses, udemyItem];\n    }\n\n    //~~~~~~~~~~~~~~~~~EDX~~~~~~~~~~~~~~~~~~~~~~~~\n\n    try {\n      await page.goto(EDX, { waitUntil: \"load\" });\n\n      //wait for input elements to load\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const edxInput = await page.$(\"#home-search\");\n    await edxInput.type(query);\n    await edxInput.type(String.fromCharCode(13));\n\n    //wait for results\n    try {\n      await page.waitForSelector(\".d-md-block\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    const edxList = await page.$$(\".discovery-card\");\n\n    let edxCourses = [];\n    for (let item of edxList) {\n      const courseName = await item\n        .$eval(\".name-heading\", (title) => title.textContent)\n        .catch((err) => console.log(\"no title\"));\n\n      const instructor = await item\n        .$eval(\".provider\", (text) => text.textContent)\n        .catch((err) => console.log(\"no instructor\"));\n\n      const image = await item\n        .$eval(\"img\", (img) => img.src)\n        .catch((err) => console.log(\"no src\"));\n\n      const link = await item\n        .$eval(\"a\", (a) => a.href)\n        .catch((err) => console.log(\"no link\"));\n\n      const edxItem = {\n        courseName,\n        instructor,\n        image,\n        link,\n      };\n\n      edxCourses = [...edxCourses, edxItem];\n    }\n\n    //MIT\n\n    try {\n      await page.goto(MIT, { waitUntil: \"load\" });\n\n      //wait for input elements to load\n      await page.waitForSelector(\"input\");\n    } catch (err) {\n      console.error(err);\n      await browser.close();\n    }\n\n    const mitInput = await page.$(\"#gsc-i-id1\");\n    await mitInput.type(query);\n    await mitInput.type(String.fromCharCode(13));\n\n    //wait for results\n\n    try {\n      await page.waitForSelector(\"#resInfo-1\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    const mitList = await page.$$(\".gsc-result\");\n\n    let mitCourses = [];\n    for (let item of mitList) {\n      const courseName = await item\n        .$eval(\".gs-title\", (title) => title.textContent)\n        .catch((err) => console.log(\"no title\"));\n\n      const image = await item\n        .$eval(\"img\", (img) => img.src)\n        .catch((err) => console.log(\"no src\"));\n\n      const link = await item\n        .$eval(\".gs-title a\", (a) => a.href)\n        .catch((err) => console.log(\"no link\"));\n\n      const mitItem = {\n        courseName,\n        instructor: \"MIT\",\n        image,\n        link,\n      };\n\n      mitCourses = [...mitCourses, mitItem];\n    }\n\n    courses = [\n      ...courseraCourses,\n      ...udemyCourses,\n      ...edxCourses,\n      ...mitCourses,\n    ];\n\n    console.log(courses);\n  } catch (err) {\n    console.error(err + \": no results found\");\n  }\n  await browser.close();\n  return courses;\n};\n"]},"metadata":{},"sourceType":"module"}